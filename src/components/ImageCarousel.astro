---
// nebulous-nova/src/components/ImageCarousel.astro
interface Image {
  src: string;
  alt: string;
}

interface Props {
  images: Image[];
}

const { images } = Astro.props;
---

<div class="carousel-container">
  <div class="carousel-slides">
    {images.map((image, index) => (
      <div class="carousel-slide" data-index={index}>
        <img src={image.src} alt={image.alt} />
      </div>
    ))}
  </div>
  <button class="carousel-button prev">{'<'}</button>
  <button class="carousel-button next">{'>'}</button>
</div>

<style>
  .carousel-container {
    position: relative;
    width: 100%;
    max-width: 800px;
    margin: auto;
    overflow: hidden;
  }

  .carousel-slides {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }

  .carousel-slide {
    min-width: 100%;
    box-sizing: border-box;
  }

  .carousel-slide img {
    width: 100%;
    display: block;
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.5);
    border: none;
    color: white;
    font-size: 2rem;
    padding: 0.5rem 1rem;
    cursor: pointer;
    z-index: 10;
  }

  .carousel-button.prev {
    left: 10px;
  }

  .carousel-button.next {
    right: 10px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.carousel-container');
    if (!container) return;

    const slidesContainer = container.querySelector<HTMLElement>('.carousel-slides');
    const slides = container.querySelectorAll('.carousel-slide');
    const prevButton = container.querySelector<HTMLButtonElement>('.carousel-button.prev');
    const nextButton = container.querySelector<HTMLButtonElement>('.carousel-button.next');
    
    let currentIndex = 0;
    const totalSlides = slides.length;
    let autoSlideInterval: number;

    function updateCarousel() {
      if (slidesContainer) {
        slidesContainer.style.transform = `translateX(-${currentIndex * 100}%)`;
      }
    }

    function nextSlide() {
      currentIndex = (currentIndex + 1) % totalSlides;
      updateCarousel();
    }

    function stopAutoSlide() {
      clearInterval(autoSlideInterval);
    }

    function startAutoSlide() {
      stopAutoSlide(); // Pastikan tidak ada interval ganda
      autoSlideInterval = window.setInterval(nextSlide, 3000);
    }

    function resetAutoSlide() {
      stopAutoSlide();
      startAutoSlide();
    }

    nextButton?.addEventListener('click', () => {
      nextSlide();
      resetAutoSlide();
    });

    prevButton?.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
      updateCarousel();
      resetAutoSlide();
    });

    container.addEventListener('mouseenter', stopAutoSlide);
    container.addEventListener('mouseleave', startAutoSlide);

    updateCarousel();
    startAutoSlide();
  });
</script>